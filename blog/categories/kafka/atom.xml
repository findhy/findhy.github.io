<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kafka | Findhy's Blog]]></title>
  <link href="http://findhy.com/blog/categories/kafka/atom.xml" rel="self"/>
  <link href="http://findhy.com/"/>
  <updated>2014-12-08T14:23:07+08:00</updated>
  <id>http://findhy.com/</id>
  <author>
    <name><![CDATA[Findhy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Caused by: java.io.NotSerializableException: kafka.javaapi.producer.Producer]]></title>
    <link href="http://findhy.com/blog/2014/06/14/kafka-storm-notserializableexception/"/>
    <updated>2014-06-14T20:24:15+08:00</updated>
    <id>http://findhy.com/blog/2014/06/14/kafka-storm-notserializableexception</id>
    <content type="html"><![CDATA[<p>我们现在的架构使用Kafka作为消息的入口，数据全部发送到Kafka中，然后用Storm的Topology写一个spout去订阅Kafka的消息，执行提交Topology：</p>

<!--more-->


<pre><code>storm jar storm-kafka-0.8-plus-test-0.1.0-SNAPSHOT-jar-with-dependencies.jar storm.kafka.topology.CyouStormTopology -c nimbus.host=10.0.1.254
</code></pre>

<p>但是报错：</p>

<pre><code>Exception in thread "main" java.lang.RuntimeException: java.io.NotSerializableException: kafka.javaapi.producer.Producer
    at backtype.storm.utils.Utils.serialize(Utils.java:56)
    at backtype.storm.topology.TopologyBuilder.createTopology(TopologyBuilder.java:89)
    at storm.kafka.topology.CyouStormTopology.main(CyouStormTopology.java:32)
Caused by: java.io.NotSerializableException: kafka.javaapi.producer.Producer
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1183)
    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1547)
    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1508)
    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431)
    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177)
    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:347)
    at backtype.storm.utils.Utils.serialize(Utils.java:52)
    ... 2 more
</code></pre>

<p>后来参考这里的提示：<a href="https://groups.google.com/forum/#!msg/storm-user/heQSeawhC5I/y40-FnQ4hiUJ  ">https://groups.google.com/forum/#!msg/storm-user/heQSeawhC5I/y40-FnQ4hiUJ  </a>
修改代码如下：</p>

<pre><code>    @Override
    public void prepare(Map stormConf, TopologyContext context,
            OutputCollector collector) {
        LOG.info("begin to prepare in bolt from CyouSendToKafkaBolt");
        this._collerctor = collector;

        Properties props = new Properties();
        props.put("metadata.broker.list", "master:9092");
        props.put("serializer.class", "kafka.serializer.StringEncoder");
        props.put("partitioner.class", "storm.kafka.producer.CyouPartitioner");
        props.put("request.required.acks", "1");
        ProducerConfig config = new ProducerConfig(props);

        producer = new Producer&lt;String, String&gt;(config);
    }
</code></pre>

<p>将原来在Bolt构造函数里面初始化Producer，改为在prepare(&hellip;)中去初始化，最后再次执行就没有问题了。</p>

<p>总结：在bolt中做一些初始化的代码，要放到prepare(&hellip;)方法中，而不要放到构造函数中，因为prepare(&hellip;)方法是在Storm worker JVM中被调用，而构造函数是在Nimbus JVM中被调用而造成不会被serialized。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kafka vs MQ vs JMS]]></title>
    <link href="http://findhy.com/blog/2014/06/10/kafka-vs-mq-vs-jms/"/>
    <updated>2014-06-10T10:43:08+08:00</updated>
    <id>http://findhy.com/blog/2014/06/10/kafka-vs-mq-vs-jms</id>
    <content type="html"><![CDATA[<p>Kafka的介绍参加这篇文章：<a href="http://findhy.com/blog/2014/05/18/kafka/">Kafka Introduction</a>，本文将Kafka、MQ、JMS这几个概念重新梳理一下，当然它们之间是有包含的关系，还有已经有了那么多的MQ产品，为什么LinkedIn还要开发Kafka呢？</p>

<!--more-->


<h3>1.MQ</h3>

<p>MQ的全称是Message Queue，中文名叫消息队列，是一种进程间通信或同一进程的不同线程间的通信方式，进程将消息存入链表数据结构中，然后其它拥有权限的进程去读取消息，这个过程是异步的，就是说消息接受者需要去轮询消息队列。详细可以参考Wikipedia的介绍：<a href="http://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">Message Queue</a>。</p>

<p>MQ是一种标准或者是一种通信方式，它是一个逻辑概念或者一个定义，不是一个具体的产品，但是有很多产品按照它定义的标准来实现，包括：JBoss Messaging、JORAM、<strong>Apache ActiveMQ</strong>、Sun Open Message Queue、Apache Qpid、HTTPSQS、Sparrow、Starling、<strong>Kestrel</strong>、<strong>RabbitMQ</strong>、Beanstalkd、<strong>Amazon SQS</strong>、<strong>Kafka</strong>、<strong>ZeroMQ</strong>、EagleMQ、IronMQ、FQueue、Spring AMQP、HornetQ、MQSSave、FFMQ、JMS4Spread、mom4j、OpenJMS、UberMQ等。这些都是Message Queue，关于这些产品的介绍可以去Google，或者参考下面两个链接：
<a href="http://stackoverflow.com/questions/731233/activemq-or-rabbitmq-or-zeromq-or  ">http://stackoverflow.com/questions/731233/activemq-or-rabbitmq-or-zeromq-or  </a>
<a href="http://www.open-open.com/53.htm%E3%80%82">http://www.open-open.com/53.htm%E3%80%82</a></p>

<h3>2.JMS</h3>

<p>JMS全称是Java Message Service，可见它是Java平台的Message Queue，而且它不是一个逻辑概念而是有一套面向消息中间件（MOM）的API，在javax.jms包内，但是要使用JMS，还要有一个JMS提供者来管理会话和队列，这个提供者就是JMS消息中间件（MOM），有哪些呢，开源的包括：Apache ActiveMQ、JBoss 社区所研发的 HornetQ、Joram、Coridan的MantaRay、The OpenJMS Group的OpenJMS等，商业的包括：BEA的BEA WebLogic Server JMS、TIBCO软件公司的EMS、GigaSpaces Technologies的GigaSpaces、IBM的WebSphere MQ等。JMS其它更多的可以参考Wikipedia的介绍：<a href="http://zh.wikipedia.org/wiki/JMS">JMS</a>。</p>

<h3>3.Kafka</h3>

<p>Kafka的介绍以及特性还有它在hadoop生态系统中的位置，可以参考这篇文章：<a href="http://findhy.com/blog/2014/05/18/kafka/">Kafka Introduction</a>，已经有了那么多的MQ产品，LinkedIn为什么还要再开发Kafka呢？目前业界比较成熟的MQ产品RabbitMQ、ZeroMQ、ActiveMQ，Kafka和它们相比有哪些优势？</p>

<p>关于RabbitMQ、ZeroMQ、ActiveMQ这几个的对比，可以参考这里：<br/>
<a href="http://stackoverflow.com/questions/731233/activemq-or-rabbitmq-or-zeromq-or  ">http://stackoverflow.com/questions/731233/activemq-or-rabbitmq-or-zeromq-or  </a>
<a href="http://itindex.net/detail/43897-%E6%B6%88%E6%81%AF-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E6%8A%80%E6%9C%AF">http://itindex.net/detail/43897-%E6%B6%88%E6%81%AF-%E4%B8%AD%E9%97%B4%E4%BB%B6-%E6%8A%80%E6%9C%AF</a></p>

<p>Kafka与RabbitMQ比较可以参考这里：<br/>
<a href="http://www.quora.com/RabbitMQ/RabbitMQ-vs-Kafka-which-one-for-durable-messaging-with-good-query-features">http://www.quora.com/RabbitMQ/RabbitMQ-vs-Kafka-which-one-for-durable-messaging-with-good-query-features</a></p>

<p>Kafka拥有更高的吞吐量和更好的分布式支持。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kafka Introduction]]></title>
    <link href="http://findhy.com/blog/2014/05/18/kafka/"/>
    <updated>2014-05-18T10:25:44+08:00</updated>
    <id>http://findhy.com/blog/2014/05/18/kafka</id>
    <content type="html"><![CDATA[<p>Kafka是Linkedin于2010开源的消息系统，现在已经放到Apache的项目中了，主页是：<a href="http://kafka.apache.org/%E3%80%82">http://kafka.apache.org/%E3%80%82</a>
Kafka是一个高吞吐量分布式的消息系统（publish-subscribe），它有如下这些特点：</p>

<!--more-->


<ul>
<li>高性能：单个Kafka broker节点就可以处理来自数千个客户端数百MB的消息读取和写入。</li>
<li>可扩展：集群设计可以保证弹性扩展而不停机</li>
<li>持久化：消息被持久化到磁盘上，并且在集群内会有复制备份，所以不会有数据丢失。并且每一个broker可以处理TB级的消息而不影响性能</li>
<li>分布式：分布式集群设计保证了系统的健壮性和容错性</li>
</ul>


<h4>Kafka的部署结构图</h4>

<p><img src="/images/kafka.png"></p>

<h4>为什么要用Kafka</h4>

<ul>
<li>统一消息入口<br/>
Storm流数据平台需要处理的数据多种多样，如果直接用Storm来接入，会需要写很多的接口，这样必然不是最佳的解决方案，加了一层Kafka之后，Storm只需要处理来自Kafka的数据，由Kafka对接数据源。</li>
<li>消息持久化<br/>
直接用Storm或者其它MQ会发生数据丢失的可能，而Kafka是把数据持久化到磁盘上面而且会有复制备份，所以不会发生数据丢失。</li>
<li>支持分布式<br/>
支持分布式保证了架构的健壮性、弹性扩展和容错。</li>
</ul>


<p>Kafka在数据平台中的位置如图：<br/>
<img src="/images/kafka_hadoop.png"></p>

<p>Kafka作为消息中间件，为Storm提供数据来源。<br/>
Zookeeper为Kafka、Storm、HBase提供分布式协调服务，所以单独部署，不用HBase自带的Zookeeper。<br/>
HBase作为Storm的持久化层，也作为Titan的数据存储层。</p>
]]></content>
  </entry>
  
</feed>
